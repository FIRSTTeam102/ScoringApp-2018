extends ../layout
block content
	//-
		link(rel="stylesheet" href="/lib/jquery-ui.min.css")
		script(src="/lib/jquery-ui.min.js")
		script(src="/lib/jqueryui-touch-punch.min.js")
	style.
		.alliance-team-old{
			display: inline-block;
			width: 100px;
			border: 1px solid white;
			padding: 8px 0px;
		}
		.alliance-team{
			padding: 15px 0px;
		}
		.team-taken{
			background-color: #444450!important;
			border: 1px solid #999999!important;
		}
		.team-available{
			background-color: #747488!important;
			border: 1px solid white!important;
		}
		.team-highlighted{
			background-color: #c5c5df!important;
			border: 1px solid white!important;
			color: #222222!important
		}
		.theme-gray{
			border-radius: 0;
			transition: 0s;
		}
	div(class="w3-mobile w3-center")
		h6(class="gear-text-white w3-margin-bottom")
			i Tap a team, then tap the empty slot [2] or [3] to move them up.
		//-div(class="w3-section")
			div(class="w3-btn gear-btn w3-cyan" id="undo") Undo Last Action
		div(class="w3-col s12 m6 l3 w3-padding-small")
			div(class="w3-left")
				div(id="undo" class="w3-btn theme-light-gray") Undo
		div(class="w3-col s0 m6 l9") 
			span &nbsp;
		p(class="w3-hide-small") &nbsp;
		section
			div(id="allianceSelection")
				each alliance, i in alliances
					- var allianceNum = i + 1;
					div(class="w3-padding-small w3-col s12 m6 l3")
						div(class="theme-gray w3-padding-large w3-col")
							div(class="w3-col s0 m12") Alliance #{allianceNum}
							div(class="w3-col s2 m0") 
								p(class="w3-large") #{allianceNum}
							div(class="w3-col s10 m12")
								div(class="w3-col s4 w3-padding-small")
									div(id=alliance.team1 alliance=allianceNum available="true" class="alliance-team w3-border w3-border-white")
									
										span=alliance.team1.substring(3)
								div(class="w3-col s4 w3-padding-small")
									div(id=`all${allianceNum}team2` alliance=allianceNum class="alliance-team w3-border w3-border-white")
									
										span=(alliance.team2) ? alliance.team2.substring(3) : "[2]"
								div(class="w3-col s4 w3-padding-small")
									div(id=`all${allianceNum}team3` alliance=allianceNum class="alliance-team w3-border w3-border-white")
									
										span=(alliance.team3) ? alliance.team3.substring(3) : "[3]"
				p(class="theme-spacer") &nbsp;
				div(class="w3-col")
					each team, i in sortedTeams
						div(class="w3-col s4 m2 l1 w3-padding-small")
							div(id=team.team_key available="true" class="theme-gray alliance-team w3-border w3-border-white")
								span=team.team_key.substring(3)
		p(class="theme-spacer") &nbsp;
		
		div(class="w3-section")
			input(class="w3-check w3-margin-right" type="checkbox" checked id="showHideData")
			label(for="showHideData") Show Team Data
		div#data()
			include allianceselection-info
	script.
		//create selection state
		var state = {};
		//CURRENTLY UNUSED
		state.alliances = {
			alliance1: ["#{alliances[0].team1}", undefined, undefined],
			alliance2: ["#{alliances[1].team1}", undefined, undefined],
			alliance3: ["#{alliances[2].team1}", undefined, undefined],
			alliance4: ["#{alliances[3].team1}", undefined, undefined],
			alliance5: ["#{alliances[4].team1}", undefined, undefined],
			alliance6: ["#{alliances[5].team1}", undefined, undefined],
			alliance7: ["#{alliances[6].team1}", undefined, undefined],
			alliance8: ["#{alliances[7].team1}", undefined, undefined],
		};
		state.rankings = [null];
		//currently selected team
		state.currentSelectedTeam = null;
		//history of selected teams
		/*
			[
				{
					"teamKey": "frc102",
					"previousSpot": rank before selected,
					"allianceSpot": 2 or 3
				}
			]
		*/
		state.moveHistory = [];
		//round 0 goes from alliance 1 to 8; round 1 goes from alliance 8 to 1
		state.currentRound = 0;
		//current alliance that is choosing a team
		state.currentAlliance = 1;
		//Previous states of allianceSelection
		var previousStates = [];
	| <script>
	each team, i in rankings
		| state.rankings[#{i+1}] = "#{team.team_key}";
	| </script>
	script.
		window.onbeforeunload = function(){return "This page won't be saved."};
		
		$(function(){
			//gray out first team
			grayOutRow( state.rankings[1] );
			
			//prettify table
			//prettifyTable();
			
			$(".alliance-team").click(doAllianceTeamClick);
			
			$(`#${state.alliances.alliance1[0]}`).addClass("team-taken");
			$(`#${state.alliances.alliance1[0]}`).attr("available", false);
			$("#all1team2").addClass("team-available");
			$("#all1team2").attr("spot-available", true);
			
			let startTime = Date.now();
			previousStates.push( {
				state: cloneState(),
				html: $("#allianceSelection").clone()
			});
			console.log(`Cloned in ${Date.now() - startTime} ms`);
			
			$("#undo").click(function(){
				doUndo();
			});
		});
		
		function doUndo(){
			console.log("Undo has been called.");
			
			//un-highlight currentSelectedTeam row
			unHighlightRow(state.currentSelectedTeam);
			
			if( state.moveHistory.length > 0){
				
				requestAnimationFrame(function(){
					
					var lastState = previousStates.pop();
					var parentElem = $("#allianceSelection").parent();
					var previousHTML = lastState.html;
					
					//replace html
					$("#allianceSelection").remove();
					parentElem.append(previousHTML);
					
					//un-highlight highlighted team
					$(".team-highlighted").removeClass("team-highlighted");
					
					//re-initialize onclick handler
					$(".alliance-team").click(doAllianceTeamClick);
					
					//refresh state
					state = lastState.state;
					
					//get last team thingy
					var lastMove = state.moveHistory.pop();
					var lastTeam = lastMove.teamKey;
					var lastSpot = lastMove.previousSpot;
					
					if( lastSpot > 8 )
						unGrayOutRow(lastTeam);
				});
			}
		}
		
		function doAllianceTeamClick(){
				
			var that = $(this);
			
			//console.log(`Team ${this.id} has been clicked`);
			var teamKey = this.id;
			var isAvailable = this.getAttribute("available") == "true" ? true : false;
			//console.log(isAvailable);
			var spotIsAvailable = this.getAttribute("spot-available") == "true" ? true : false;
			var currentSelectedTeam = state.currentSelectedTeam;
			
			//isAvailable: if this is a team that can be picked
			if( isAvailable ){
				//if there is a team already selected, remove highlight
				if( currentSelectedTeam ){
					$(`#${currentSelectedTeam}`).removeClass("team-highlighted");
					
					//un-highlight currentSelectedTeam row
					unHighlightRow(state.currentSelectedTeam);
				}
				//if we're clicking same team twice, remove currentselectedteam
				if( state.currentSelectedTeam == teamKey ){
					//un-highlight currentSelectedTeam row
					unHighlightRow(state.currentSelectedTeam);
					
					state.currentSelectedTeam = null;
				}
				//if not clicking same team twice, set the now-clicked team to be selected
				else{
					//un-highlight currentSelectedTeam row
					unHighlightRow(state.currentSelectedTeam);
					
					that.addClass("team-highlighted");
					state.currentSelectedTeam = teamKey;
					
					//now highlight new current team row
					highlightRow(state.currentSelectedTeam);
				}
			}
			//spotIsAvailable: if this is a slot that can be filled
			else if( spotIsAvailable ){
				//if a team is selected, DO EVERYTHING
				if( currentSelectedTeam ){
					
					//console.log(currentSelectedTeam);
					$(`#${currentSelectedTeam}`).removeClass("team-highlighted");
					state.currentSelectedTeam = null;
					
					var currentSpot = 0;
					
					//find rank of team
					for(var i = 0; i < state.rankings.length; i++){
						if(state.rankings[i] == currentSelectedTeam){
							currentSpot = i;
						}
					}
					
					//push into move history
					state.moveHistory.push({
						teamKey: currentSelectedTeam,
						previousSpot: currentSpot,
						allianceSpot: state.currentRound == 0 ? 2 : 3
					});
					
					//Clone this state into previousStates
					let startTime = Date.now();
					previousStates.push( {
						state: cloneState(),
						html: $("#allianceSelection").clone()
					});
					console.log(`Cloned state in ${Date.now() - startTime} ms`);
					
					//if team is not a captain, hide team from below list
					if( currentSpot > 8 ){
						$(`#${currentSelectedTeam}`).parent().hide();
						
						//remove team from rankings
						state.rankings.splice(currentSpot, 1);
					}
					//if team is a captain, move alliances up
					else{
						//get alliance num
						var currentAlliance = parseInt($(`#${currentSelectedTeam}`).attr("alliance"));
						//console.log(currentAlliance);
						
						
						//loop through remaining alliances, shifting them up
						for(var i = currentAlliance; i <= 8; i++){
							
							let nextTeamInThisSpot = state.rankings[i + 1];
							//console.log(nextTeamInThisSpot)
							let thisSpot = $(`#${state.rankings[i]}`);
							//console.log(thisSpot);
							
							//set this spot's contents to next team
							thisSpot.html( nextTeamInThisSpot.substring(3) );
							//id has to be set after the fact
							
							//if this team is not a captain, just hide em
							if( !$(`#${nextTeamInThisSpot}`).attr("alliance") ){
								
								$(`#${nextTeamInThisSpot}`).parent().hide();
							}
							
							//console.log( state.rankings[i] );
						}
						//remove team from rankings
						state.rankings.splice(currentSpot, 1);
						
						var allAllianceTeams = $(".alliance-team");
						
						for(var i = 1; i < allAllianceTeams.length; i++ ){
							
							let thisTeam = allAllianceTeams[i];
							
							//if this element contains a valid team
							if( thisTeam.id && thisTeam.id.substring(0,3) == "frc" ){
								//then set id equal to the text it contains
								$(thisTeam).attr( "id", "frc" + $(thisTeam).text() );
							}
						}
					}
					//gray out selected team's row
					grayOutRow(currentSelectedTeam);
					
					//place the selected team into the selected spot
					that.html(currentSelectedTeam.substring(3));
					
					//gray out the now-populated slot
					that.removeClass("team-available")	//remove highlight
						.addClass("team-taken")			//make dark
						.attr("spot-available", false);	//make spot no longer able to be populated
					
					//if first round, move selection thingimajiggy down until 8
					if( state.currentRound == 0 ){
													
						if( state.currentAlliance < 8 ){
							
							//switch over to the next alliance to kerfuffle
							state.currentAlliance++;
							//set team 2 of next alliance as available
							$(`#all${state.currentAlliance}team2`).addClass("team-available")	//highlight
								.attr("spot-available", true);									//make spot able to be populated
						}
						//if the alliance we just did is alliance 8
						else{
							//begin to move down the chain now
							state.currentRound = 1;
							
							//set team 3 (THREE) of next alliance as available
							$(`#all${state.currentAlliance}team3`).addClass("team-available")
								.attr("spot-available", true);
						}
						//set first team in alliance to be unavailable
						let team1 = state.rankings[state.currentAlliance];
						
						console.log("Gonna disable "+team1);
						$(`#${team1}`).attr("available", false)		//make team no longer able to be highlighted
							.addClass("team-taken");				//make dark
					}
					else{
						//only set next alliance available if we have at least one left
						if( state.currentAlliance > 1 ){
							
							state.currentAlliance--;
							//set team 3 (THREE) of next alliance as available
							$(`#all${state.currentAlliance}team3`).addClass("team-available")
								.attr("spot-available", true);
						}
					}
				}
			}
		}
		
		function cloneState(){
			
			var clone = {};
			
			//clone rankings
			clone.rankings = [];
			for(var i = 0; i < state.rankings.length; i++){
				clone.rankings[i] = state.rankings[i];
			}
			
			//clone moveHistory
			clone.moveHistory = [];
			for(var i = 0; i < state.moveHistory.length; i++){
				clone.moveHistory[i] = state.moveHistory[i];
			}
			
			//clone currentSelectedTeam, currentRound, currentAlliance
			clone.currentSelectedTeam = state.currentSelectedTeam;
			clone.currentRound = state.currentRound;
			clone.currentAlliance = state.currentAlliance;
			
			console.log(clone);
			
			return clone;
		}
		
		function highlightRow(teamKey){
			$(`#row_${teamKey}`).css({
				"background-color": "rgba(220,220,240)",
				"color": "#000000"
			}).attr({
				"selectable": "false"
			});
			
			var children = $(`#row_${teamKey}`).children();
			
			let targetR = 240, targetG = 240, targetB = 255;
			
			for(var i = 3; i < children.length; i++){
				
				let thisStyle = $(children[i]).css("background-color").split(",");
				let r = thisStyle[0].substring(thisStyle[0].indexOf("(")+1);
				let g = thisStyle[1];
				let b = thisStyle[2].substring(0, thisStyle[2].indexOf(")"));
				
				$(children[i]).attr({
					"r": r,
					"g": g,
					"b": b
				});
				
				r = lerp(r, targetR, 0.7);
				g = lerp(g, targetG, 0.7);
				b = lerp(b, targetB, 0.7);
				
				$(children[i]).attr({
					"style": `background-color: rgba(${r}, ${g}, ${b}, 1); color:#000!important`
				})
			}
		}
		
		function unHighlightRow(teamKey){
			$(`#row_${teamKey}`).attr({
				"selectable" : "true",
				"style" : "background-color: #b0b0c057;"
			});
			
			var children = $(`#row_${teamKey}`).children();
			
			let targetR = 240, targetG = 240, targetB = 255;
			
			for(var i = 3; i < children.length; i++){
				
				let r = $(children[i]).attr("r");
				let g = $(children[i]).attr("g");
				let b = $(children[i]).attr("b");
				
				$(children[i]).attr({
					"style": `background-color: rgba(${r}, ${g}, ${b}, 1);`
				})
			}
			//prettifyTable();
		}
		
		function grayOutRow(teamKey){
			
			$(`#row_${teamKey}`).css({
				"background-color": "rgba(67, 66, 66, 0.41)",
				"color": "#8d8d8dcf"
			}).attr({
				"selectable": "false"
			});
			var children = $(`#row_${teamKey}`).children();
			
			let targetR = 0, targetG = 0, targetB = 0;
			
			for(var i = 3; i < children.length; i++){
				
				let thisStyle = $(children[i]).css("background-color").split(",");
				let r = thisStyle[0].substring(thisStyle[0].indexOf("(")+1);
				let g = thisStyle[1];
				let b = thisStyle[2].substring(0, thisStyle[2].indexOf(")"));
				
				r = lerp(r, targetR, 0.8);
				g = lerp(g, targetG, 0.8);
				b = lerp(b, targetB, 0.8);
				
				$(children[i]).css({
					"background-color": `rgba(${r}, ${g}, ${b}, 0.41)`,
					"color": "#8d8d8dcf"
				});
			}
		}
		
		function lerp(a, b, t) {
			return (1-t)*a + t*b;
		}
		
		function unGrayOutRow(teamKey){
			
			$(`#row_${teamKey}`).attr({
				"selectable": "true"
			});
			//prettifyTable();
		}
		
		function prettifyTable(){
			
			requestAnimationFrame(function(){
				var table = $("#metricTable").eq(0);
				var rows = table.find('tr:gt(0)').toArray();
				
				for(var i = 0; i < rows.length; i++){
					
					if( $(rows[i]).attr("selectable") != "false"){
						//style every other row
						if( i % 2 == 0 ){
							$(rows[i]).css({
								"background-color": "rgba(255, 255, 255, 0.25)",
								"color": "#fff"
							});
						}
						else{
							$(rows[i]).css({
								"background-color": "rgba(200, 200, 200, 0.25)",
								"color": "#fff"
							});
						}
					}
				}
			});
		}
		
		$("#showHideData").click(function(e){
			if(this.checked){
				$("#data").show();
			}else{
				$("#data").hide();
			}
		})