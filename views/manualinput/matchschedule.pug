extends ../layout
block content
	style.
		.MatchAddRow{
			border-radius:50%;
			width:48px;
			height:48px;
			background-color: #213fdd;
		}
		.MatchAddRow:hover{
			background-color: #4060ff;
		}
		.MatchAddRow span{
			position:relative;
			top:4px;
		}
		.TimeInput{
			transition: 0.5s;
			border: 2px solid #00000000!important;
		}
		.TimeInput.error{
			border: 2px solid red!important;
		}
		.TimeInput:focus{
			outline: 0!important;
		}
	div(class="w3-section w3-auto" id="MatchTable")
		- var row_number = 1;
		include templates/matchscheduleinput
		- row_number++;
		include templates/matchscheduleinput
		- row_number++;
		div(class="w3-col w3-padding" id=`MatchAddOne_${row_number}`)
			div(class="w3-col m3 l2") &nbsp;
			div(class="w3-col m3 l2 w3-margin-top")
				div(class="w3-left")
					div(class="w3-btn MatchAddRow" onclick="addNewMatchRow()") 
						span(class="w3-xlarge") +
	//-Current row that the user can input a match for. Declared up here so we can change row_number to "Model" down below.
	script var currentMatchRow = #{row_number - 1};
	div(class="w3-hide")
		div(id="MatchRowModel")
			- row_number = "Model";
			include templates/matchscheduleinput
		div(id="MatchAddOneModel")
			div(class="w3-col w3-padding" id=`MatchAddOne_${row_number}`)
				div(class="w3-col m3 l2") &nbsp;
				div(class="w3-col m3 l2 w3-margin-top")
					div(class="w3-left")
						div(class="w3-btn MatchAddRow" onclick="addNewMatchRow()") 
							span(class="w3-xlarge") +
	script.
		
		$(".RedTeam3").on("change", onChangeMatchInput);
		$(".TimeInput").on("keydown", onKeydownTimeInput);
		
		var isCtrlCmdPressedDown = false;
		
		//Toggle isCtrlCmdPressedDown to disable parseDate when a ctrl command is sent
		$(document).on("keydown", function(evt){
			//CHECK ON MAC ON FIREFOX (224), OPERA (17), CHROMIUM (91, 93)
			if(evt.keyCode == 17){
				isCtrlCmdPressedDown = true;
				console.log("Keydown: ctrlCmd set true");
			}
		});
		$(document).on("keyup", function(evt){
			if(evt.keyCode == 17){
				isCtrlCmdPressedDown = false;
				console.log("Keyup: ctrlCmd set false");
			}
		});
		
		function onKeydownTimeInput(evt){
			
			var inputElement = this;
			
			//If they key pressed is NOT: -shift, ctrl, caps lock, tab
			if(evt.keyCode != 16 && evt.keyCode != 17 && evt.keyCode != 20 && evt.keyCode != 9){
				//Keydown event fires BEFORE value is filled, so we must add keycode to string.
				//If key is backspace, manually subtract last character.
				if(evt.keyCode == 8){
					var timeString = inputElement.value.substring(0, inputElement.value.length - 1);
				}
				//if input is alphanumeric, or space/colon, AND Ctrl is not pressed, add keycode to string.
				else if((( evt.keyCode <= 90 && evt.keyCode >= 48 ) ||
					evt.keyCode == 32 || evt.keyCode == 186) && !isCtrlCmdPressedDown){
					
					var timeString = inputElement.value + evt.key;
				}
				//otherwise, just grab value of input.
				else{
					var timeString = inputElement.value;
				}
				console.log(timeString);
				parseTime(timeString, function(err, date){
					if(err){
						console.log(err);
						//add error class (red border)
						$(inputElement).addClass("error");
					}
					else if(date){
						console.log(date);
						//remove error class
						$(inputElement).removeClass("error");
					}
				});
			}
		}
		function parseTime( t, callback ) {
			var d = new Date();
			var time = t.match( /(\d+)(?::(\d\d))?\s*(p?)/ );
			
			if(time){
				d.setHours( parseInt( time[1]) + (time[3] ? 12 : 0) );
				d.setMinutes( parseInt( time[2]) || 0 );
				callback(null, d);
			}
			else{
				callback("Couldn't parse time.", 0);
			}
		}
		
		function onChangeMatchInput(){
			var thisMatchRow = this.name.split("_")[1];
			
			console.log(`thisMatchRow: ${thisMatchRow} currentMatchRow: ${currentMatchRow}`);
			
			if(thisMatchRow == currentMatchRow || thisMatchRow == currentMatchRow - 1){
				addNewMatchRow();
			}
		}
		
		function addNewMatchRow(){
			currentMatchRow++;
			
			console.log(currentMatchRow);
			
			//remove current and prev match row add btn
			$(`#MatchAddOne_${currentMatchRow}`).remove();
			$(`#MatchAddOne_${currentMatchRow - 1}`).remove();
			
			var newRow = $(`#MatchRow_Model`).clone();
			
			//Replace match label with custom number BEFORE find/replace.
			var label = newRow.find("#MatchLabel_Model label");
			label.text(`Match ${currentMatchRow < 10 ? "0" + currentMatchRow : currentMatchRow}:`);
			
			//Find and replace "Model" with current match row for all IDs and values.
			newRow.html(function(index, html){
				return html.replace(/Model/g, currentMatchRow);
			});
			//set id, because find and replace is only for innerHTML
			newRow.attr("id", `MatchRow_${currentMatchRow}`);
			
			//Append new row to match table
			$("#MatchTable").append(newRow);
			
			//get add one (child of model so i don't have to deal with MatchAddOneModel ids left over)
			var newAddOne = $("#MatchAddOneModel").clone().children();
			//update id
			newAddOne.attr("id", `MatchAddOne_${currentMatchRow}`);
			//Append new add button to match table
			$("#MatchTable").append(newAddOne);
			
			//Update onchange handlers
			$(".RedTeam3").on("change", onChangeMatchInput);
		}