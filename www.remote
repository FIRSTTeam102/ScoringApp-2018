#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('./app');
var http = require('http');
var https = require('https');
var fs = require('fs');

//Get keys stored on remote server.
const privateKey = fs.readFileSync('/etc/letsencrypt/live/scouting.team102.org/privkey.pem', 'utf8');
const certificate = fs.readFileSync('/etc/letsencrypt/live/scouting.team102.org/cert.pem', 'utf8');
const ca = fs.readFileSync('/etc/letsencrypt/live/scouting.team102.org/chain.pem', 'utf8');

const credentials = {
  key: privateKey,
  cert: certificate,
  ca: ca
};

//var port = normalizePort(process.env.PORT || '3000');
//app.set('port', port);

//Create http and https server.
var httpServer = http.createServer(app);
var httpsServer = https.createServer(credentials, app)

// Listen on provided port, on all network interfaces.

httpServer.listen(3000);
httpServer.on('error', onError);
httpServer.on('listening', onListeningHttp);

//httpsServer.listen(3001);
httpsServer.on('error', onError);
httpsServer.on('listening', onListeningHttps);

// Event listener for HTTP server "error" event.

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.

function onListeningHttp() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}

function onListeningHttps(){
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
